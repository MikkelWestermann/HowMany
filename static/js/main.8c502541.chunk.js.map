{"version":3,"sources":["components/Title.js","components/Text.js","components/Form.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","option","Text","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeOption","isWith","setState","isInList","onOptionChange","onTextChange","event","text","target","value","setData","state","count","split","textareaClasses","backgroundClasses","textareaSize","calculateCount","_ref","filter","character","length","toLowerCase","match","data","map","item","concat","apply","toConsumableArray","curOption","_this2","rows","cols","onChange","onClick","Component","Form","handleAddCard","addCard","cardText","buttonClass","setTimeout","src_components_Text","List","savedCards","card","i","key","App","src_components_Title","src_components_Form","components_List","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c502541.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css'\n\nconst Title = (props) => {\n  return (\n    <div className='title'>\n      <h1>How Many <span className='title-option'>{props.option}</span>?</h1>\n      <h1>Let's Count 'em</h1>\n    </div>\n  );\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport './Text.css';\n\nclass Text extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      option: this.props.curOption || 'Characters',\n      text: this.props.text || '',\n      count: 0,\n      isWith: true\n    }\n  }\n  handleChangeOption = (option, isWith) => {\n    this.setState({\n      option,\n      isWith\n    })\n    if (!this.props.isInList) {\n      this.props.onOptionChange(option);\n    }\n  }\n  onTextChange = (event) => {\n    this.setState({ text: event.target.value })\n    if (!this.props.isInList) {\n      this.props.setData(event.target.value, this.state.option)\n    }\n  }\n  count = (split) => {\n    return this.state.text.split(split);\n  }\n  textareaClasses = () => {\n    if (this.props.isInList) {\n      return 'textareaList'\n    } else {\n      return 'textareaForm'\n    }\n  }\n  backgroundClasses = () => {\n    if (this.props.isInList) {\n      return 'textList'\n    } else {\n      return 'textForm'\n    }\n  }\n  textareaSize = () => {\n    if (this.props.isInList) {\n      return '25'\n    } else {\n      return '35'\n    }\n  }\n  calculateCount = () => {\n    switch (this.state.option) {\n      case 'Characters':\n        if (this.state.isWith) {\n          return this.count('').filter(character => character !== '\\n' && character !== '').length;\n        } else {\n          return this.count('').filter(character => character !== '\\n' && character !== '' && character !== ' ').length;\n        }\n      case 'Letters':\n        return this.count('').filter(character => character.toLowerCase().match(/[a-z]/i)).length;\n      case 'Words':\n        const data = this.count('\\n').map(item => item.split(' '));\n        const mergedData = [].concat(...data);\n        return mergedData.filter(character => character !== ' ' && character !== '\\n' && character !== '').length;\n      case 'Paragraphs':\n        return this.count('\\n').filter(item => item !== '\\n' && item !== '' && item !== ' ').length;\n      default:\n        return 'Mistakes Were Made'\n    }\n  }\n  render() {\n    return(\n      <div className={`text ${this.backgroundClasses()}`}>\n        <textarea rows='10' cols={this.textareaSize()} value={this.state.text} onChange={this.onTextChange}></textarea>\n        <div className='info'>\n          <ul>\n            <li className='first-li' ><strong>Options:</strong></li>\n            <li onClick={() => this.handleChangeOption('Characters', true)}>Characters w/ spaces</li>\n            <li onClick={() => this.handleChangeOption('Characters', false)}>Characters w/o spaces</li>\n            <li onClick={() => this.handleChangeOption('Letters', false)}>Letters (w/o numbers)</li>\n            <li onClick={() => this.handleChangeOption('Words', false)}>Words</li>\n            <li onClick={() => this.handleChangeOption('Paragraphs', false)} className='last-li'>Paragraphs</li>\n          </ul>\n          <p>Number of {this.state.option}</p>\n          <p className='count'>{this.calculateCount()}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Text;\n","import React, { Component } from 'react';\nimport Text from './Text';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: '',\n      curOption: '',\n      cardText: 'Save This Card',\n      buttonClass: 'blue'\n    }\n  }\n\n  setData = (text, curOption) => {\n    this.setState({\n      text,\n      curOption\n    })\n  }\n\n  handleAddCard = () => {\n    this.props.addCard(this.state.text, this.state.curOption);\n    this.setState({\n      cardText: 'Card Saved',\n      buttonClass: 'green'\n    })\n    setTimeout(() => {\n      this.setState({\n        cardText: 'Save This Card',\n        buttonClass: 'blue'\n      })\n    }, 3000);\n  }\n\n  render() {\n    return(\n      <div className='form'>\n        <h1>Write Something!</h1>\n        <Text isInList={false} onOptionChange={this.props.onOptionChange} setData={this.setData}/>\n        <button className={this.state.buttonClass} onClick={this.handleAddCard}>{this.state.cardText}</button>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Text from './Text';\n\nclass List extends Component {\n  render() {\n    return(\n      <div>\n        {\n          this.props.savedCards.map((card, i) => {\n            return <Text isInList={true} onOptionChange={this.props.onOptionChange} text={card.text} curOption={card.curOption} key={i}/>\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport List from './components/List';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      option: 'Characters',\n      savedCards: []\n    }\n  }\n  onOptionChange = (option) => {\n    this.setState({ option });\n  }\n  addCard = (text, curOption) => {\n    this.setState({\n      savedCards: [...this.state.savedCards, {\n        text,\n        curOption\n      }]\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Title\n          option={this.state.option}\n        />\n        <Form\n          onOptionChange={this.onOptionChange}\n          addCard={this.addCard}\n        />\n        {\n          this.state.savedCards.length > 0\n          &&\n          <div>\n            <h2>Saved Cards</h2>\n            <List\n              onOptionChange={this.onOptionChange}\n              savedCards={this.state.savedCards}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}